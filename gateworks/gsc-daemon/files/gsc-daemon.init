#!/bin/sh /etc/rc.common

START=55
COUNT=0

[ -x /usr/sbin/gscd ] || exit 1

gsc_config() {
	local cfg="$1"

	local args gsc_irq i2c_bus pb_gpio pb_name nochange_period board gsc_ver subsystem

	board=$(i2cdump -f -y -r 48-63 0 0x51 2>/dev/null| tail -1 | cut -c56- | tr -d \.)
	i2c_bus=0
	case "$board" in
		# Ventana Product Family
		GW5*)
			gsc_irq=4
			pb_gpio=240
			# Ventana's GPIO's aren't exported, so try here
			(echo $gsc_irq > /sys/class/gpio/export)
			;;
		# Laguna Product Family
		GW2391*|GW2388*|GW2387*|GW2386*)
			gsc_irq=1
			pb_gpio=100
			;;
		GW2384*)
			gsc_irq=0
			pb_gpio=100
			;;
		GW2380*|GW2382*|GW2383*)
			gsc_irq=1
			pb_gpio=108
			;;

		# Rincon Product Family
		GW2361*)
			gsc_irq=6
			pb_gpio=100
			i2c_bus=1
			;;

		# Cambria Product Family
		GW2359*|GW2360*)
			gsc_irq=12
			pb_gpio=100
			;;

		# Avila Product Family
		GW2373*)
			gsc_irq=12
			pb_gpio=100
			;;
		GW2369*)
			gsc_irq=12
			pb_gpio=108
			;;

		*)
			echo "Unknown board: $board"
			exit 1
			;;
	esac

	gsc_ver=$(i2cget -f -y 0 0x20 14)
	gsc_ver=$(printf "%d" $gsc_ver)

	config_get subsystem "$cfg" subsystem "button"
	config_get gsc_irq   "$cfg" gsc_irq $gsc_irq
	config_get i2c_bus   "$cfg" i2c_bus $i2c_bus
	config_get pb_gpio   "$cfg" pb_gpio $pb_gpio
	config_get pb_name   "$cfg" pb_name "USER_PB"
	config_get nochange_period    "$cfg" nochange_period  0
	args="$i2c_bus $gsc_irq --pb_gpio $pb_gpio --pb_name $pb_name --nochange_period $nochange_period --subsystem $subsystem"

	# options
	if [ "$pb_gpio" != -1 ]; then
	  # monitor GPIO and PB
		[ $gsc_ver -lt 30 ] && {
			echo "GSC Firmware version r30 required to use pushbutton as GPIO"
			exit 1
		}
		i2cset -f -y 0 0x20  0 0x00 ;# disable hard reset
		i2cset -f -y 0 0x20 11 0x10 ;# enable GPIO interrupt source
	else
		# monitor GPIO and leave PB as hard reset
		i2cset -f -y 0 0x20  0 0x01 ;# PB hard reset
		i2cset -f -y 0 0x20 11 0x10 ;# enable GPIO interrupt source
		append args "--nochange_mask=0xffff"
	fi

	echo "gscd $ags"
	/usr/sbin/gscd $args &
}

start() {
	config_load system
	config_foreach gsc_config gsc
}

stop() {
	echo "stopping gscd"
	killall -q gscd
}

restart() {
	stop
	start
}
